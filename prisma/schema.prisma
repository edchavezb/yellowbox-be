generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["relationJoins"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  userId         String                     @id @default(uuid()) @db.Uuid
  firebaseId     String                     @unique
  username       String                     @unique
  email          String                     @unique
  firstName      String?
  lastName       String?
  imageUrl       String?
  accountData    UserAccountManagementData?
  billing        UserBilling?
  spotifyAccount UserSpotifyAccount?
  folders        Folder[]
  boxes          Box[]
  itemReviews    ItemReview[]
}

model UserAccountManagementData {
  userId        String       @id @db.Uuid
  accountTier   AccountTiers @default(FREE)
  signUpDate    DateTime     @default(now())
  emailVerified Boolean      @default(false)
  showTutorial  Boolean      @default(true)
  user          User         @relation(fields: [userId], references: [userId], onDelete: Cascade)
}

model UserBilling {
  userId                   String  @id @db.Uuid
  stripeCustomerId         String?
  stripeSubscriptionId     String?
  stripeSubscriptionStatus String?
  stripePriceId            String?
  stripeProductId          String?
  user                     User    @relation(fields: [userId], references: [userId], onDelete: Cascade)
}

model UserSpotifyAccount {
  userId       String @id @db.Uuid
  refreshToken String
  spotifyId    String
  user         User   @relation(fields: [userId], references: [userId], onDelete: Cascade)
}

model Folder {
  folderId    String   @id @default(uuid()) @db.Uuid
  creatorId   String   @db.Uuid
  name        String
  description String
  isPublic    Boolean
  createdAt   DateTime @default(now())
  creator     User     @relation(fields: [creatorId], references: [userId], onDelete: Cascade)
  boxes       Box[]
}

model Box {
  boxId           String               @id @default(uuid()) @db.Uuid
  creatorId       String?              @db.Uuid
  folderId        String?              @db.Uuid
  position        Int?
  folderPosition  Int?
  name            String
  description     String
  isPublic        Boolean              @default(true)
  deletedAt       DateTime?
  createdAt       DateTime             @default(now())
  creator         User?                @relation(fields: [creatorId], references: [userId], onDelete: SetNull)
  folder          Folder?              @relation(fields: [folderId], references: [folderId], onDelete: SetNull)
  artists         BoxArtist[]
  tracks          BoxTrack[]
  albums          BoxAlbum[]
  playlists       BoxPlaylist[]
  subsections     BoxSubsection[]
  sectionSettings BoxSectionSettings[]
}

model DeletedBox {
  deletedBoxId Int      @id @default(autoincrement())
  boxData      Json // Store all the box and related data as JSON
  deletedAt    DateTime
  movedAt      DateTime @default(now())
}

model BoxAlbum {
  boxAlbumId  String               @id @default(uuid()) @db.Uuid
  boxId       String               @db.Uuid
  albumId     String               @db.Uuid
  note        String?
  position    Int?
  box         Box                  @relation(fields: [boxId], references: [boxId], onDelete: Cascade)
  album       Album                @relation(fields: [albumId], references: [itemId])
  subsections BoxSubsectionAlbum[] // Relation to subsections
}

model BoxTrack {
  boxTrackId  String               @id @default(uuid()) @db.Uuid
  boxId       String               @db.Uuid
  trackId     String               @db.Uuid
  note        String?
  position    Int?
  box         Box                  @relation(fields: [boxId], references: [boxId], onDelete: Cascade)
  track       Track                @relation(fields: [trackId], references: [itemId])
  subsections BoxSubsectionTrack[] // Relation to subsections
}

model BoxArtist {
  boxArtistId String                @id @default(uuid()) @db.Uuid
  boxId       String                @db.Uuid
  artistId    String                @db.Uuid
  note        String?
  position    Int?
  box         Box                   @relation(fields: [boxId], references: [boxId], onDelete: Cascade)
  artist      Artist                @relation(fields: [artistId], references: [itemId])
  subsections BoxSubsectionArtist[] // Relation to subsections
}

model BoxPlaylist {
  boxPlaylistId String                  @id @default(uuid()) @db.Uuid
  boxId         String                  @db.Uuid
  playlistId    String                  @db.Uuid
  note          String?
  position      Int?
  box           Box                     @relation(fields: [boxId], references: [boxId], onDelete: Cascade)
  playlist      Playlist                @relation(fields: [playlistId], references: [itemId])
  subsections   BoxSubsectionPlaylist[] // Relation to subsections
}

model BoxSectionSettings {
  boxId              String       @db.Uuid
  type               String
  primarySorting     String       @default("custom")
  secondarySorting   String       @default("none")
  view               String       @default("grid")
  sortingOrder       SortingOrder @default(ASCENDING)
  displayGrouping    Boolean      @default(false)
  displaySubsections Boolean      @default(false)
  isVisible          Boolean      @default(true)
  box                Box          @relation(fields: [boxId], references: [boxId], onDelete: Cascade)

  @@id([boxId, type])
}

model BoxSubsection {
  subsectionId String                  @id @default(uuid()) @db.Uuid
  boxId        String                  @db.Uuid
  itemType     String
  name         String
  position     Int
  box          Box                     @relation(fields: [boxId], references: [boxId], onDelete: Cascade)
  tracks       BoxSubsectionTrack[]
  albums       BoxSubsectionAlbum[]
  artists      BoxSubsectionArtist[]
  playlists    BoxSubsectionPlaylist[]
}

model BoxSubsectionTrack {
  boxTrackId   String  @db.Uuid
  subsectionId String  @db.Uuid
  note         String?
  position     Int

  boxTrack   BoxTrack      @relation(fields: [boxTrackId], references: [boxTrackId], onDelete: Cascade)
  subsection BoxSubsection @relation(fields: [subsectionId], references: [subsectionId], onDelete: Cascade)

  @@id([boxTrackId, subsectionId])
}

model BoxSubsectionAlbum {
  boxAlbumId   String  @db.Uuid
  subsectionId String  @db.Uuid
  note         String?
  position     Int

  boxAlbum   BoxAlbum      @relation(fields: [boxAlbumId], references: [boxAlbumId], onDelete: Cascade)
  subsection BoxSubsection @relation(fields: [subsectionId], references: [subsectionId], onDelete: Cascade)

  @@id([boxAlbumId, subsectionId])
}

model BoxSubsectionArtist {
  boxArtistId  String  @db.Uuid
  subsectionId String  @db.Uuid
  note         String?
  position     Int

  boxArtist  BoxArtist     @relation(fields: [boxArtistId], references: [boxArtistId], onDelete: Cascade)
  subsection BoxSubsection @relation(fields: [subsectionId], references: [subsectionId], onDelete: Cascade)

  @@id([boxArtistId, subsectionId])
}

model BoxSubsectionPlaylist {
  boxPlaylistId String  @db.Uuid
  subsectionId  String  @db.Uuid
  note          String?
  position      Int

  boxPlaylist BoxPlaylist   @relation(fields: [boxPlaylistId], references: [boxPlaylistId], onDelete: Cascade)
  subsection  BoxSubsection @relation(fields: [subsectionId], references: [subsectionId], onDelete: Cascade)

  @@id([boxPlaylistId, subsectionId])
}

model Artist {
  itemId     String      @id @default(uuid()) @db.Uuid
  spotifyId  String      @unique
  name       String
  popularity Int
  genres     String[]
  type       String
  images     Json
  boxes      BoxArtist[]
}

model Album {
  itemId      String     @id @default(uuid()) @db.Uuid
  spotifyId   String     @unique
  name        String
  images      Json
  albumType   String
  artists     Json
  releaseDate String
  totalTracks Int
  type        String
  boxes       BoxAlbum[]
}

model Playlist {
  itemId           String        @id @default(uuid()) @db.Uuid
  spotifyId        String        @unique
  name             String
  description      String
  ownerDisplayName String
  ownerId          String
  images           Json
  type             String
  totalTracks      Int
  boxes            BoxPlaylist[]
}

model Track {
  itemId           String     @id @default(uuid()) @db.Uuid
  spotifyId        String     @unique
  name             String
  artists          Json
  albumName        String
  albumId          String
  albumReleaseDate String?
  albumImages      Json
  duration         Int
  explicit         Boolean
  type             String
  boxes            BoxTrack[]
}

model ItemReview {
  reviewId        String          @id @default(uuid()) @db.Uuid
  spotifyId       String
  authorId        String          @db.Uuid
  author          User?           @relation(fields: [authorId], references: [userId], onDelete: Cascade)
  content         String
  itemType        String
  reviewSentiment ReviewSentiment
  createdAt       DateTime        @default(now())
  deletedAt       DateTime?
}

enum ReviewSentiment {
  LIKE
  DISLIKE
  NEUTRAL
}

enum AccountTiers {
  FREE
  PRO
}

enum SortingOrder {
  ASCENDING
  DESCENDING
}
