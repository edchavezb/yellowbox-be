generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["relationJoins"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  userId          String                     @id @default(uuid()) @db.Uuid
  firebaseId      String                     @unique
  username        String                     @unique
  email           String                     @unique
  firstName       String?
  lastName        String?
  bio             String?
  imageUrl        String?
  accountData     UserAccountManagementData?
  billing         UserBilling?
  spotifyAccount  UserSpotifyAccount?
  queue           UserQueue?
  folders         Folder[]
  boxes           Box[]
  playedArtists   PlayedArtist[]
  playedAlbums    PlayedAlbum[]
  playedTracks    PlayedTrack[]
  playedPlaylists PlayedPlaylist[]
}

model UserAccountManagementData {
  userId        String       @id @db.Uuid
  accountTier   AccountTiers @default(FREE)
  signUpDate    DateTime     @default(now())
  emailVerified Boolean      @default(false)
  showTutorial  Boolean      @default(true)
  user          User         @relation(fields: [userId], references: [userId], onDelete: Cascade)
}

model UserBilling {
  userId                   String  @id @db.Uuid
  stripeCustomerId         String?
  stripeSubscriptionId     String?
  stripeSubscriptionStatus String?
  stripePriceId            String?
  stripeProductId          String?
  user                     User    @relation(fields: [userId], references: [userId], onDelete: Cascade)
}

model UserSpotifyAccount {
  userId       String @id @db.Uuid
  refreshToken String
  spotifyId    String
  user         User   @relation(fields: [userId], references: [userId], onDelete: Cascade)
}

model UserQueue {
  queueId       String          @id @default(uuid()) @db.Uuid
  userId        String          @unique @db.Uuid
  lastUpdatedAt DateTime        @default(now())
  QueueArtist   QueueArtist[]
  QueueAlbum    QueueAlbum[]
  QueuePlaylist QueuePlaylist[]
  QueueTrack    QueueTrack[]
  user          User            @relation(fields: [userId], references: [userId], onDelete: Cascade)
}

model Folder {
  folderId    String   @id @default(uuid()) @db.Uuid
  creatorId   String   @db.Uuid
  name        String
  description String
  isPublic    Boolean
  createdAt   DateTime @default(now())
  creator     User     @relation(fields: [creatorId], references: [userId], onDelete: Cascade)
  boxes       Box[]
}

model Box {
  boxId           String               @id @default(uuid()) @db.Uuid
  creatorId       String?              @db.Uuid
  folderId        String?              @db.Uuid
  position        Int
  folderPosition  Int?
  name            String
  description     String
  isPublic        Boolean              @default(true)
  deletedAt       DateTime?
  createdAt       DateTime             @default(now())
  creator         User?                @relation(fields: [creatorId], references: [userId], onDelete: SetNull)
  folder          Folder?              @relation(fields: [folderId], references: [folderId], onDelete: SetNull)
  artists         BoxArtist[]
  tracks          BoxTrack[]
  albums          BoxAlbum[]
  playlists       BoxPlaylist[]
  subsections     BoxSubsection[]
  sectionSettings BoxSectionSettings[]
}

model DeletedBox {
  deletedBoxId Int      @id @default(autoincrement())
  boxData      Json // Store all the box and related data as JSON
  deletedAt    DateTime
  movedAt      DateTime @default(now())
}

model BoxAlbum {
  boxAlbumId  String               @id @default(uuid()) @db.Uuid
  boxId       String               @db.Uuid
  albumId     String
  note        String?
  position    Int
  box         Box                  @relation(fields: [boxId], references: [boxId], onDelete: Cascade)
  album       Album                @relation(fields: [albumId], references: [spotifyId])
  subsections BoxSubsectionAlbum[] // Relation to subsections
}

model BoxTrack {
  boxTrackId  String               @id @default(uuid()) @db.Uuid
  boxId       String               @db.Uuid
  trackId     String
  note        String?
  position    Int
  box         Box                  @relation(fields: [boxId], references: [boxId], onDelete: Cascade)
  track       Track                @relation(fields: [trackId], references: [spotifyId])
  subsections BoxSubsectionTrack[] // Relation to subsections
}

model BoxArtist {
  boxArtistId String                @id @default(uuid()) @db.Uuid
  boxId       String                @db.Uuid
  artistId    String
  note        String?
  position    Int
  box         Box                   @relation(fields: [boxId], references: [boxId], onDelete: Cascade)
  artist      Artist                @relation(fields: [artistId], references: [spotifyId])
  subsections BoxSubsectionArtist[] // Relation to subsections
}

model BoxPlaylist {
  boxPlaylistId String                  @id @default(uuid()) @db.Uuid
  boxId         String                  @db.Uuid
  playlistId    String
  note          String?
  position      Int
  box           Box                     @relation(fields: [boxId], references: [boxId], onDelete: Cascade)
  playlist      Playlist                @relation(fields: [playlistId], references: [spotifyId])
  subsections   BoxSubsectionPlaylist[] // Relation to subsections
}

model BoxSectionSettings {
  boxId              String       @db.Uuid
  type               String
  primarySorting     String       @default("custom")
  secondarySorting   String       @default("none")
  view               String       @default("grid")
  sortingOrder       SortingOrder @default(ASCENDING)
  displayGrouping    Boolean      @default(false)
  displaySubsections Boolean      @default(false)
  isVisible          Boolean      @default(true)
  box                Box          @relation(fields: [boxId], references: [boxId], onDelete: Cascade)

  @@id([boxId, type])
}

model BoxSubsection {
  subsectionId String                  @id @default(uuid()) @db.Uuid
  boxId        String                  @db.Uuid
  itemType     String
  name         String
  position     Int
  box          Box                     @relation(fields: [boxId], references: [boxId], onDelete: Cascade)
  tracks       BoxSubsectionTrack[]
  albums       BoxSubsectionAlbum[]
  artists      BoxSubsectionArtist[]
  playlists    BoxSubsectionPlaylist[]
}

model BoxSubsectionTrack {
  boxTrackId   String  @db.Uuid
  subsectionId String  @db.Uuid
  note         String?
  position     Int

  boxTrack   BoxTrack      @relation(fields: [boxTrackId], references: [boxTrackId], onDelete: Cascade)
  subsection BoxSubsection @relation(fields: [subsectionId], references: [subsectionId], onDelete: Cascade)

  @@id([boxTrackId, subsectionId])
}

model BoxSubsectionAlbum {
  boxAlbumId   String  @db.Uuid
  subsectionId String  @db.Uuid
  note         String?
  position     Int

  boxAlbum   BoxAlbum      @relation(fields: [boxAlbumId], references: [boxAlbumId], onDelete: Cascade)
  subsection BoxSubsection @relation(fields: [subsectionId], references: [subsectionId], onDelete: Cascade)

  @@id([boxAlbumId, subsectionId])
}

model BoxSubsectionArtist {
  boxArtistId  String  @db.Uuid
  subsectionId String  @db.Uuid
  note         String?
  position     Int

  boxArtist  BoxArtist     @relation(fields: [boxArtistId], references: [boxArtistId], onDelete: Cascade)
  subsection BoxSubsection @relation(fields: [subsectionId], references: [subsectionId], onDelete: Cascade)

  @@id([boxArtistId, subsectionId])
}

model BoxSubsectionPlaylist {
  boxPlaylistId String  @db.Uuid
  subsectionId  String  @db.Uuid
  note          String?
  position      Int

  boxPlaylist BoxPlaylist   @relation(fields: [boxPlaylistId], references: [boxPlaylistId], onDelete: Cascade)
  subsection  BoxSubsection @relation(fields: [subsectionId], references: [subsectionId], onDelete: Cascade)

  @@id([boxPlaylistId, subsectionId])
}

model QueueArtist {
  queueArtistId String    @id @default(uuid()) @db.Uuid
  artistId      String
  queueId       String    @db.Uuid
  position      Int
  createdAt     DateTime  @default(now())
  artist        Artist    @relation(fields: [artistId], references: [spotifyId])
  queue         UserQueue @relation(fields: [queueId], references: [queueId], onDelete: Cascade)

  @@unique([artistId, queueId])
}

model QueueAlbum {
  queueAlbumId String    @id @default(uuid()) @db.Uuid
  albumId      String
  queueId      String    @db.Uuid
  position     Int
  createdAt    DateTime  @default(now())
  album        Album     @relation(fields: [albumId], references: [spotifyId])
  queue        UserQueue @relation(fields: [queueId], references: [queueId], onDelete: Cascade)

  @@unique([albumId, queueId])
}

model QueuePlaylist {
  queuePlaylistId String    @id @default(uuid()) @db.Uuid
  playlistId      String
  queueId         String    @db.Uuid
  position        Int
  createdAt       DateTime  @default(now())
  playlist        Playlist  @relation(fields: [playlistId], references: [spotifyId])
  queue           UserQueue @relation(fields: [queueId], references: [queueId], onDelete: Cascade)

  @@unique([playlistId, queueId])
}

model QueueTrack {
  queueTrackId String    @id @default(uuid()) @db.Uuid
  trackId      String
  queueId      String    @db.Uuid
  position     Int
  createdAt    DateTime  @default(now())
  track        Track     @relation(fields: [trackId], references: [spotifyId])
  queue        UserQueue @relation(fields: [queueId], references: [queueId], onDelete: Cascade)

  @@unique([trackId, queueId])
}

model PlayedArtist {
  playedArtistId String    @id @default(uuid()) @db.Uuid
  userId         String    @db.Uuid
  artistId       String
  lastPlayedAt   DateTime?

  user   User   @relation(fields: [userId], references: [userId], onDelete: Cascade)
  artist Artist @relation(fields: [artistId], references: [spotifyId], onDelete: Cascade)

  @@unique([userId, artistId])
}

model PlayedAlbum {
  playedAlbumId String    @id @default(uuid()) @db.Uuid
  userId        String    @db.Uuid
  albumId       String
  lastPlayedAt  DateTime?

  user  User  @relation(fields: [userId], references: [userId], onDelete: Cascade)
  album Album @relation(fields: [albumId], references: [spotifyId], onDelete: Cascade)

  @@unique([userId, albumId])
}

model PlayedTrack {
  playedTrackId String    @id @default(uuid()) @db.Uuid
  userId        String    @db.Uuid
  trackId       String
  lastPlayedAt  DateTime?

  user  User  @relation(fields: [userId], references: [userId], onDelete: Cascade)
  track Track @relation(fields: [trackId], references: [spotifyId], onDelete: Cascade)

  @@unique([userId, trackId])
}

model PlayedPlaylist {
  playedPlaylistId String    @id @default(uuid()) @db.Uuid
  userId           String    @db.Uuid
  playlistId       String
  lastPlayedAt     DateTime?

  user     User     @relation(fields: [userId], references: [userId], onDelete: Cascade)
  playlist Playlist @relation(fields: [playlistId], references: [spotifyId], onDelete: Cascade)

  @@unique([userId, playlistId])
}

model Artist {
  spotifyId String         @id
  name      String
  genres    String[]
  type      String
  images    Json
  boxes     BoxArtist[]
  queues    QueueArtist[]
  userPlays PlayedArtist[]
}

model Album {
  spotifyId   String        @id
  name        String
  images      Json
  albumType   String
  artists     Json
  releaseDate String
  totalTracks Int
  type        String
  boxes       BoxAlbum[]
  queues      QueueAlbum[]
  userPlays   PlayedAlbum[]
}

model Playlist {
  spotifyId        String           @id
  name             String
  description      String
  ownerDisplayName String
  ownerId          String
  images           Json
  type             String
  totalTracks      Int
  boxes            BoxPlaylist[]
  queues           QueuePlaylist[]
  userPlays        PlayedPlaylist[]
}

model Track {
  spotifyId        String        @id
  name             String
  artists          Json
  albumName        String
  albumId          String
  albumReleaseDate String?
  albumImages      Json
  duration         Int
  explicit         Boolean
  type             String
  boxes            BoxTrack[]
  queues           QueueTrack[]
  userPlays        PlayedTrack[]
}

enum AccountTiers {
  FREE
  PRO
}

enum SortingOrder {
  ASCENDING
  DESCENDING
}
