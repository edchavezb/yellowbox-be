generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["relationJoins"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  userId                String                     @id @default(uuid()) @db.Uuid
  firebaseId            String                     @unique
  username              String                     @unique
  firstName             String
  lastName              String
  imageUrl              String
  linkedServices        Json
  accountManagementData UserAccountManagementData?
  billing               UserBilling?
  folders               Folder[]
  boxes                 Box[]
}

model UserAccountManagementData {
  accountManagementId String       @id @default(uuid()) @db.Uuid
  userId              String       @unique @db.Uuid
  accountTier         AccountTiers @default(FREE)
  signUpDate          DateTime     @default(now())
  emailVerified       Boolean      @default(false)
  email               String       @unique
  showTutorial        Boolean      @default(true)
  user                User         @relation(fields: [userId], references: [userId])
}

model UserBilling {
  userBillingId            String  @id @default(uuid()) @db.Uuid
  userId                   String  @unique @db.Uuid
  stripeCustomerId         String?
  stripeSubscriptionId     String?
  stripeSubscriptionStatus String?
  stripePriceId            String?
  stripeProductId          String?
  user                     User    @relation(fields: [userId], references: [userId])
}

model Folder {
  folderId    String   @id @default(uuid()) @db.Uuid
  creatorId   String   @db.Uuid
  name        String
  description String
  isPublic    Boolean
  createdAt   DateTime @default(now())
  creator     User     @relation(fields: [creatorId], references: [userId])
  boxes       Box[]
}

model Box {
  boxId           String               @id @default(uuid()) @db.Uuid
  creatorId       String               @db.Uuid
  folderId        String?              @db.Uuid
  position        Int
  folderPosition  Int?
  name            String
  description     String
  isPublic        Boolean              @default(true)
  isDeleted       Boolean              @default(false)
  createdAt       DateTime             @default(now())
  creator         User                 @relation(fields: [creatorId], references: [userId])
  folder          Folder?              @relation(fields: [folderId], references: [folderId])
  artists         BoxArtist[]
  tracks          BoxTrack[]
  albums          BoxAlbum[]
  playlists       BoxPlaylist[]
  subsections     BoxSubsection[]
  sectionSettings BoxSectionSettings[]
}

model BoxArtist {
  artistId  String   @db.Uuid
  boxId     String   @db.Uuid
  position  Int
  note      String
  createdAt DateTime @default(now())
  artist    Artist   @relation(fields: [artistId], references: [artistId])
  box       Box      @relation(fields: [boxId], references: [boxId])

  @@id([artistId, boxId])
}

model BoxTrack {
  trackId   String   @db.Uuid
  boxId     String   @db.Uuid
  position  Int
  note      String
  createdAt DateTime @default(now())
  track     Track    @relation(fields: [trackId], references: [trackId])
  box       Box      @relation(fields: [boxId], references: [boxId])

  @@id([trackId, boxId])
}

model BoxAlbum {
  albumId   String   @db.Uuid
  boxId     String   @db.Uuid
  position  Int
  note      String
  createdAt DateTime @default(now())
  album     Album    @relation(fields: [albumId], references: [albumId])
  box       Box      @relation(fields: [boxId], references: [boxId])

  @@id([albumId, boxId])
}

model BoxPlaylist {
  playlistId String   @db.Uuid
  boxId      String   @db.Uuid
  position   Int
  note       String
  createdAt  DateTime @default(now())
  playlist   Playlist @relation(fields: [playlistId], references: [playlistId])
  box        Box      @relation(fields: [boxId], references: [boxId])

  @@id([playlistId, boxId])
}

model BoxSectionSettings {
  sectionSettingsId  Int     @id @default(autoincrement())
  boxId              String  @unique @db.Uuid
  type               String
  primarySorting     String
  secondarySorting   String
  view               String
  sortingOrder       String
  displayGrouping    Boolean
  displaySubsections Boolean
  isVisible          Boolean
  box                Box?    @relation(fields: [boxId], references: [boxId])
}

model BoxSubsection {
  subsectionId   Int                     @id @default(autoincrement())
  boxId          String                  @db.Uuid
  itemType       String
  subsectionName String
  position       Int
  box            Box                     @relation(fields: [boxId], references: [boxId])
  artists        BoxSubsectionArtist[]
  albums         BoxSubsectionAlbum[]
  tracks         BoxSubsectionTrack[]
  playlists      BoxSubsectionPlaylist[]
}

model BoxSubsectionArtist {
  artistId        String        @db.Uuid
  boxSubsectionId Int
  position        Int
  note            String
  createdAt       DateTime      @default(now())
  artist          Artist        @relation(fields: [artistId], references: [artistId])
  boxSubsection   BoxSubsection @relation(fields: [boxSubsectionId], references: [subsectionId])

  @@id([artistId, boxSubsectionId])
}

model BoxSubsectionAlbum {
  albumId         String        @db.Uuid
  boxSubsectionId Int
  position        Int
  note            String
  createdAt       DateTime      @default(now())
  album           Album         @relation(fields: [albumId], references: [albumId])
  boxSubsection   BoxSubsection @relation(fields: [boxSubsectionId], references: [subsectionId])

  @@id([albumId, boxSubsectionId])
}

model BoxSubsectionTrack {
  trackId         String        @db.Uuid
  boxSubsectionId Int
  position        Int
  note            String
  createdAt       DateTime      @default(now())
  track           Track         @relation(fields: [trackId], references: [trackId])
  boxSubsection   BoxSubsection @relation(fields: [boxSubsectionId], references: [subsectionId])

  @@id([trackId, boxSubsectionId])
}

model BoxSubsectionPlaylist {
  playlistId      String        @db.Uuid
  boxSubsectionId Int
  position        Int
  note            String
  createdAt       DateTime      @default(now())
  playlist        Playlist      @relation(fields: [playlistId], references: [playlistId])
  boxSubsection   BoxSubsection @relation(fields: [boxSubsectionId], references: [subsectionId])

  @@id([playlistId, boxSubsectionId])
}

model Artist {
  artistId       String                @id @default(uuid()) @db.Uuid
  spotifyUrl     String                @unique
  spotifyId      String                @unique
  spotifyUri     String                @unique
  name           String
  popularity     Int
  genres         String[]
  type           String
  images         Json
  boxSubsections BoxSubsectionArtist[]
  boxes          BoxArtist[]
}

model Album {
  albumId        String               @id @default(uuid()) @db.Uuid
  spotifyUrl     String               @unique
  spotifyId      String               @unique
  spotifyUri     String               @unique
  name           String
  images         Json
  albumType      String
  artists        Json
  releaseDate    String
  totalTracks    Int
  type           String
  boxSubsections BoxSubsectionAlbum[]
  boxes          BoxAlbum[]
}

model Playlist {
  playlistId     String                  @id @default(uuid()) @db.Uuid
  spotifyUrl     String                  @unique
  spotifyId      String                  @unique
  spotifyUri     String                  @unique
  name           String
  description    String
  ownerName      String
  ownerUri       String
  images         Json
  type           String
  totalTracks    Int
  boxSubsections BoxSubsectionPlaylist[]
  boxes          BoxPlaylist[]
}

model Track {
  trackId        String               @id @default(uuid()) @db.Uuid
  spotifyUrl     String               @unique
  spotifyId      String               @unique
  spotifyUri     String               @unique
  name           String
  artists        Json
  albumName      String
  albumId        String
  albumImages    Json
  durationMs     Int
  explicit       String
  popularity     Int
  type           String
  boxSubsections BoxSubsectionTrack[]
  boxes          BoxTrack[]
}

enum AccountTiers {
  FREE
  PRO
}
